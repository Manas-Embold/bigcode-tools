#!/usr/bin/env node

const astGenerator = require('..');
const yargs = require('yargs');

const argv = yargs
    .usage('$0 [options] <input>',
           'parse the file or files to a JSON AST format', (yargs) => {
      yargs
      .example('bigcode-astgen-js --batch -o result/asts \'src/**/*.js\'',
               'parse all JS files in src dir and output ASTs in result dir')
      .positional('input', {
        describe: 'file or glob pattern of files to parse',
      })
      .option('batch', {
        describe: 'process a batch of files, input will be treated as a glob',
        boolean: true,
        default: false,
      })
      .option('output', {
        alias: 'o',
        describe: 'output file for normal mode, output prefix for batch mode',
      })
      .option('min-nodes', {
        describe: 'minimum number of nodes (only batch mode)',
        default: 20,
        number: true,
      })
      .option('max-nodes', {
        describe: 'maximum number of nodes (only batch mode)',
        default: 50000,
        number: true,
      });
    })
    .help('h')
    .alias('h', 'help')
    .argv;


function runBatch(argv) {
  if (!argv.output) {
    console.error('--batch requires --output to be set');
    yargs.showHelp();
    process.exit(1);
  }
  astGenerator(argv, (err, count) => {
    if (err !== null) {
      console.error('failed: ' + err);
    } else {
      console.log(`generated ASTs for ${count} files`);
    }
  });
}

function run(argv) {
  astGenerator.processFile(argv.input, argv.output, (err) => {
    if (err !== null) {
      console.error(`failed to process ${argv.input}: ${err}`);
      process.exit(1);
    }
  });
}

if (argv.batch) {
  runBatch(argv);
} else {
  run(argv);
}
